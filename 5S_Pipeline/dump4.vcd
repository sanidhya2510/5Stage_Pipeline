$date
	Fri Oct 21 20:30:02 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Exe_mem $end
$var wire 16 ! AluOutput [15:0] $end
$var wire 1 " checkwdata $end
$var wire 1 # clkwire $end
$var wire 4 $ regNos [3:0] $end
$var wire 16 % regwire1 [15:0] $end
$var wire 16 & regwire2 [15:0] $end
$var wire 16 ' regwire3 [15:0] $end
$var wire 16 ( regwire4 [15:0] $end
$var wire 16 ) regwire5 [15:0] $end
$var wire 16 * regwire6 [15:0] $end
$var wire 16 + regwire7 [15:0] $end
$var wire 16 , regwire8 [15:0] $end
$var wire 16 - wdata [15:0] $end
$var wire 4 . regnum [3:0] $end
$var wire 4 / regdest [3:0] $end
$var wire 16 0 reg_data_2_wire [15:0] $end
$var wire 16 1 reg_data_1_wire [15:0] $end
$var wire 16 2 reg8_out [15:0] $end
$var wire 16 3 reg7_out [15:0] $end
$var wire 16 4 reg6_out [15:0] $end
$var wire 16 5 reg5_out [15:0] $end
$var wire 16 6 reg4_out [15:0] $end
$var wire 16 7 reg3_out [15:0] $end
$var wire 16 8 reg2_out [15:0] $end
$var wire 16 9 reg1_out [15:0] $end
$var wire 4 : opcode_out [3:0] $end
$var wire 8 ; npcwire [7:0] $end
$var wire 8 < npc_out [7:0] $end
$var wire 8 = npc [7:0] $end
$var wire 4 > memwire [3:0] $end
$var wire 4 ? ldst [3:0] $end
$var wire 8 @ instrwire [7:0] $end
$var wire 4 A instruction_4_bits [3:0] $end
$var wire 4 B instruction [3:0] $end
$var wire 4 C dest_reg_wire [3:0] $end
$var wire 20 D ciwire [19:0] $end
$var wire 16 E ALU_output [15:0] $end
$var reg 16 F AluOutput_reg [15:0] $end
$var reg 16 G Data_from_mem [15:0] $end
$var reg 16 H aluoutput [15:0] $end
$var reg 1 I clk $end
$var reg 20 J current_instruction [19:0] $end
$var reg 8 K imm [7:0] $end
$var reg 4 L inst [3:0] $end
$var reg 4 M instructioni [3:0] $end
$var reg 4 N ldsti [3:0] $end
$var reg 4 O linenum [3:0] $end
$var reg 8 P npc_in [7:0] $end
$var reg 8 Q npci [7:0] $end
$var reg 16 R op1 [15:0] $end
$var reg 16 S op2 [15:0] $end
$var reg 8 T pc [7:0] $end
$var reg 16 U reg1 [15:0] $end
$var reg 16 V reg2 [15:0] $end
$var reg 16 W reg3 [15:0] $end
$var reg 16 X reg4 [15:0] $end
$var reg 16 Y reg5 [15:0] $end
$var reg 16 Z reg6 [15:0] $end
$var reg 16 [ reg7 [15:0] $end
$var reg 16 \ reg8 [15:0] $end
$var reg 4 ] regNos_reg [3:0] $end
$var reg 4 ^ regdesti [3:0] $end
$var reg 4 _ registernum [3:0] $end
$scope module D $end
$var wire 16 ` AluOutput [15:0] $end
$var wire 16 a Data_from_mem [15:0] $end
$var wire 1 # clkwire $end
$var wire 16 b reg1_in [15:0] $end
$var wire 16 c reg1_out [15:0] $end
$var wire 16 d reg2_in [15:0] $end
$var wire 16 e reg2_out [15:0] $end
$var wire 16 f reg3_in [15:0] $end
$var wire 16 g reg3_out [15:0] $end
$var wire 16 h reg4_in [15:0] $end
$var wire 16 i reg4_out [15:0] $end
$var wire 16 j reg5_in [15:0] $end
$var wire 16 k reg5_out [15:0] $end
$var wire 16 l reg6_in [15:0] $end
$var wire 16 m reg6_out [15:0] $end
$var wire 16 n reg7_in [15:0] $end
$var wire 16 o reg7_out [15:0] $end
$var wire 16 p reg8_in [15:0] $end
$var wire 16 q reg8_out [15:0] $end
$var wire 4 r regNos [3:0] $end
$var wire 4 s instruction [3:0] $end
$var reg 4 t ADD [3:0] $end
$var reg 4 u BEQ [3:0] $end
$var reg 4 v BNE [3:0] $end
$var reg 4 w LW [3:0] $end
$var reg 4 x MUL [3:0] $end
$var reg 4 y SUB [3:0] $end
$var reg 4 z SW [3:0] $end
$var reg 16 { reg1_in_data [15:0] $end
$var reg 16 | reg2_in_data [15:0] $end
$var reg 16 } reg3_in_data [15:0] $end
$var reg 16 ~ reg4_in_data [15:0] $end
$var reg 16 !" reg5_in_data [15:0] $end
$var reg 16 "" reg6_in_data [15:0] $end
$var reg 16 #" reg7_in_data [15:0] $end
$var reg 16 $" reg8_in_data [15:0] $end
$upscope $end
$scope module S2 $end
$var wire 1 # clkwire $end
$var wire 20 %" current_instruction [19:0] $end
$var wire 4 &" instruction_4_bits [3:0] $end
$var wire 8 '" instrwire [7:0] $end
$var wire 4 (" memwire [3:0] $end
$var wire 8 )" npc_in [7:0] $end
$var wire 8 *" npc_out [7:0] $end
$var wire 16 +" reg_data_1_wire [15:0] $end
$var wire 16 ," reg_data_2_wire [15:0] $end
$var wire 16 -" regwire1 [15:0] $end
$var wire 16 ." regwire2 [15:0] $end
$var wire 16 /" regwire3 [15:0] $end
$var wire 16 0" regwire4 [15:0] $end
$var wire 16 1" regwire5 [15:0] $end
$var wire 16 2" regwire6 [15:0] $end
$var wire 16 3" regwire7 [15:0] $end
$var wire 16 4" regwire8 [15:0] $end
$var wire 4 5" dest_reg_wire [3:0] $end
$var reg 16 6" dest_reg [15:0] $end
$var reg 20 7" instr [19:0] $end
$var reg 8 8" instr_line_no [7:0] $end
$var reg 4 9" mem_line_no [3:0] $end
$var reg 8 :" npc [7:0] $end
$var reg 4 ;" opcode [3:0] $end
$var reg 16 <" r1 [15:0] $end
$var reg 16 =" r2 [15:0] $end
$var reg 16 >" r3 [15:0] $end
$var reg 16 ?" r4 [15:0] $end
$var reg 16 @" r5 [15:0] $end
$var reg 16 A" r6 [15:0] $end
$var reg 16 B" r7 [15:0] $end
$var reg 16 C" r8 [15:0] $end
$var reg 16 D" reg_data_1 [15:0] $end
$var reg 16 E" reg_data_2 [15:0] $end
$upscope $end
$scope module dut $end
$var wire 16 F" aluoutput [15:0] $end
$var wire 1 " checkwritedata $end
$var wire 1 # clkwire $end
$var wire 4 G" instruction [3:0] $end
$var wire 4 H" linenum [3:0] $end
$var wire 4 I" opcode_out [3:0] $end
$var wire 4 J" registernum [3:0] $end
$var wire 4 K" regnum [3:0] $end
$var wire 16 L" writedata [15:0] $end
$var reg 1 M" checkbool $end
$var reg 4 N" inst_pass [3:0] $end
$var reg 4 O" regno [3:0] $end
$var reg 16 P" val [15:0] $end
$var integer 32 Q" a [31:0] $end
$var integer 32 R" fd [31:0] $end
$var integer 32 S" i [31:0] $end
$upscope $end
$scope module dut2 $end
$var wire 16 T" ALU_output [15:0] $end
$var wire 1 # clkwire $end
$var wire 8 U" imm [7:0] $end
$var wire 4 V" instruction [3:0] $end
$var wire 4 W" instructioni [3:0] $end
$var wire 4 X" ldst [3:0] $end
$var wire 4 Y" ldsti [3:0] $end
$var wire 8 Z" npci [7:0] $end
$var wire 16 [" op1 [15:0] $end
$var wire 16 \" op2 [15:0] $end
$var wire 4 ]" regdest [3:0] $end
$var wire 4 ^" regdesti [3:0] $end
$var wire 8 _" npc [7:0] $end
$var reg 16 `" ALU_result [15:0] $end
$var reg 4 a" instruction_reg [3:0] $end
$var reg 4 b" ldsti_reg [3:0] $end
$var reg 4 c" npc_reg [3:0] $end
$var reg 4 d" regdesti_reg [3:0] $end
$upscope $end
$scope module iftest $end
$var wire 1 # clkwire $end
$var wire 20 e" instructionwire [19:0] $end
$var wire 8 f" npcwire [7:0] $end
$var wire 8 g" pc [7:0] $end
$var reg 20 h" curr_instruction [19:0] $end
$var reg 8 i" pc_reg [7:0] $end
$var integer 32 j" a [31:0] $end
$var integer 32 k" file [31:0] $end
$var integer 32 l" line_num [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1 l"
b10000000000000000000000000000011 k"
b1 j"
b0 i"
bx h"
b0 g"
b0 f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
b0xxxx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
b10001 S"
b10000000000000000000000000000100 R"
b0 Q"
bx P"
bx O"
bx N"
0M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
b1100 4"
b1011 3"
b1010 2"
b1001 1"
b1000 0"
b111 /"
b110 ."
b101 -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b100 z
b1 y
b10 x
b11 w
b110 v
b101 u
b0 t
bx s
bx r
b0 q
b1100 p
b0 o
b1011 n
b0 m
b1010 l
b0 k
b1001 j
b0 i
b1000 h
b0 g
b111 f
b0 e
b110 d
b0 c
b101 b
bx a
bx `
bx _
bx ^
bx ]
b1100 \
b1011 [
b1010 Z
b1001 Y
b1000 X
b111 W
b110 V
b101 U
b0 T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
0I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
b0xxxx =
bx <
b0 ;
bx :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
bx 1
bx 0
bx /
bx .
bx -
b1100 ,
b1011 +
b1010 *
b1001 )
b1000 (
b111 '
b110 &
b101 %
bx $
0#
0"
bx !
$end
#3
b1 ;
b1 f"
b0x g"
b1 i"
b110000101100000000 D
b110000101100000000 e"
b110000101100000000 h"
b0xxxx 6"
b1100 C"
b1011 B"
b1010 A"
b1001 @"
b1000 ?"
b111 >"
b110 ="
b101 <"
b1100 2
b1100 q
b1100 $"
b1011 3
b1011 o
b1011 #"
b1010 4
b1010 m
b1010 ""
b1001 5
b1001 k
b1001 !"
b1000 6
b1000 i
b1000 ~
b111 7
b111 g
b111 }
b110 8
b110 e
b110 |
b101 9
b101 c
b101 {
1#
1I
#6
b1 P
b1 )"
b110000101100000000 J
b110000101100000000 %"
b0xxxx g"
b0xxxx T
0#
0I
#9
b0 C
b0 5"
b0 0
b0 ,"
b0 E"
b1011 1
b1011 +"
b1011 D"
b0 @
b0 '"
b0 8"
b0 6"
b1011 >
b1011 ("
b1011 9"
b11 A
b11 &"
b11 ;"
b1 <
b1 *"
b1 :"
b110000101100000000 7"
b10 ;
b10 f"
b10 i"
bx D
bx e"
bx h"
1#
1I
#12
b0 K
b0 U"
b11 M
b11 W"
b0 ^
b0 ^"
b1 Q
b1 Z"
b1011 N
b1011 Y"
b0 S
b0 \"
b1011 R
b1011 ["
b10 P
b10 )"
bx J
bx %"
0#
0I
#15
bx C
bx 5"
b11 ;
b11 f"
b11 i"
bx @
bx '"
bx 8"
b0xxxx 6"
bx >
bx ("
bx 9"
bx A
bx &"
bx ;"
b10 <
b10 *"
b10 :"
bx 7"
b0 /
b0 ]"
b0 d"
b1011 ?
b1011 X"
b1011 b"
b1 =
b1 _"
b1 c"
b11 B
b11 s
b11 V"
b11 a"
1#
1I
#18
bx K
bx U"
bx M
bx W"
bx ^
bx ^"
b10 Q
b10 Z"
bx N
bx Y"
b11 P
b11 )"
b0x1 g"
b1 T
b0 _
b0 J"
b1011 O
b1011 H"
b11 L
b11 G"
0#
0I
#21
bx /
bx ]"
bx d"
bx ?
bx X"
bx b"
b10 =
b10 _"
b10 c"
b1011 E
b1011 T"
b1011 `"
bx B
bx s
bx V"
bx a"
x"
1M"
b1010 -
b1010 L"
b1010 P"
b11 :
b11 I"
b11 N"
b0 .
b0 K"
b0 O"
b11 <
b11 *"
b11 :"
b100 ;
b100 f"
b0x0x g"
b100 i"
1#
1I
#24
b0 $
b0 r
b0 ]
b1010 G
b1010 a
b1011 !
b1011 `
b1011 F
b0xx0 g"
b10 T
bx _
bx J"
bx O
bx H"
b1011 H
b1011 F"
bx L
bx G"
b11 Q
b11 Z"
b100 P
b100 )"
0#
0I
#27
b101 ;
b101 f"
b0xxx g"
b101 i"
b100 <
b100 *"
b100 :"
bx :
bx I"
bx N"
bx .
bx K"
bx O"
b11 =
b11 _"
b11 c"
1#
1I
#30
b100 Q
b100 Z"
b101 P
b101 )"
bx $
bx r
bx ]
b0xx1 g"
b11 T
0#
0I
#33
b100 =
b100 _"
b100 c"
b101 <
b101 *"
b101 :"
b110 ;
b110 f"
b0x1x g"
b110 i"
1#
1I
#36
b1x0 g"
b100 T
b101 Q
b101 Z"
b110 P
b110 )"
0#
0I
#39
b111 ;
b111 f"
b1xx g"
b111 i"
b110 <
b110 *"
b110 :"
b101 =
b101 _"
b101 c"
1#
1I
#42
b110 Q
b110 Z"
b111 P
b111 )"
b1x1 g"
b101 T
0#
0I
#45
b110 =
b110 _"
b110 c"
b111 <
b111 *"
b111 :"
b1000 ;
b1000 f"
b0xx0x g"
b1000 i"
1#
1I
#48
b0xxx0 g"
b110 T
b111 Q
b111 Z"
b1000 P
b1000 )"
0#
0I
#50
