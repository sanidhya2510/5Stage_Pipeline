$date
	Thu Oct 20 19:55:43 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test_memoryut $end
$var wire 1 ! checkwdata $end
$var wire 1 " clkwire $end
$var wire 1 # regnum $end
$var wire 16 $ wdata [15:0] $end
$var reg 16 % aluoutput [15:0] $end
$var reg 1 & clk $end
$var reg 4 ' inst [3:0] $end
$var reg 4 ( linenum [3:0] $end
$var reg 4 ) registernum [3:0] $end
$scope module dut $end
$var wire 16 * aluoutput [15:0] $end
$var wire 1 ! checkwritedata $end
$var wire 1 " clkwire $end
$var wire 4 + instruction [3:0] $end
$var wire 4 , linenum [3:0] $end
$var wire 4 - registernum [3:0] $end
$var wire 1 # regnum $end
$var wire 16 . writedata [15:0] $end
$var integer 32 / a [31:0] $end
$var reg 1 0 checkbool $end
$var integer 32 1 fd [31:0] $end
$var reg 5 2 i [4:0] $end
$var reg 4 3 regno [3:0] $end
$var reg 16 4 val [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 4
bx 3
b10000 2
b10000000000000000000000000000011 1
00
b1 /
bx .
b110 -
b1001 ,
b11 +
b111 *
b110 )
b1001 (
b11 '
0&
b111 %
bx $
x#
0"
0!
$end
#5
0#
b1111 2
b10000000000000000000000000000100 1
b0 4
b0 $
b0 .
b110 3
1&
1"
#10
0&
0"
