$date
	Sat Oct 22 23:57:17 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test_bench $end
$var wire 1 ! clkwire $end
$var wire 4 " regdest [3:0] $end
$var wire 4 # ldst [3:0] $end
$var wire 1 $ jump_selector $end
$var wire 8 % jump_address [7:0] $end
$var wire 4 & instruction [3:0] $end
$var wire 16 ' ALU_output [15:0] $end
$var reg 1 ( clk $end
$var reg 8 ) imm [7:0] $end
$var reg 4 * instructioni [3:0] $end
$var reg 4 + ldsti [3:0] $end
$var reg 8 , npci [7:0] $end
$var reg 16 - op1 [15:0] $end
$var reg 16 . op2 [15:0] $end
$var reg 4 / regdesti [3:0] $end
$scope module dut $end
$var wire 16 0 ALU_output [15:0] $end
$var wire 1 ! clkwire $end
$var wire 8 1 imm [7:0] $end
$var wire 4 2 instruction [3:0] $end
$var wire 4 3 instructioni [3:0] $end
$var wire 1 $ jump_selector $end
$var wire 4 4 ldst [3:0] $end
$var wire 4 5 ldsti [3:0] $end
$var wire 16 6 op1 [15:0] $end
$var wire 16 7 op2 [15:0] $end
$var wire 4 8 regdest [3:0] $end
$var wire 4 9 regdesti [3:0] $end
$var wire 8 : jump_address [7:0] $end
$var reg 16 ; ALU_result [15:0] $end
$var reg 4 < instruction_reg [3:0] $end
$var reg 1 = jump_selector_reg $end
$var reg 4 > ldsti_reg [3:0] $end
$var reg 4 ? npc_reg [3:0] $end
$var reg 4 @ regdesti_reg [3:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx @
bx ?
bx >
x=
bx <
bx ;
b0xxxx :
b101 9
bx 8
b1100 7
b1010 6
b1001 5
bx 4
b0 3
bx 2
b1111 1
bx 0
b101 /
b1100 .
b1010 -
b1010 ,
b1001 +
b0 *
b1111 )
0(
bx '
bx &
b0xxxx %
x$
bx #
bx "
0!
$end
#2
b101 "
b101 8
b101 @
b1001 #
b1001 4
b1001 >
b0 %
b0 :
b0 ?
b10110 '
b10110 0
b10110 ;
0$
0=
b0 &
b0 2
b0 <
1!
1(
#4
0!
0(
b1 *
b1 3
b11 .
b11 7
b1100 -
b1100 6
#6
b1001 '
b1001 0
b1001 ;
b1 &
b1 2
b1 <
1!
1(
#8
0!
0(
b10 *
b10 3
b111 .
b111 7
b100 -
b100 6
#10
b11100 '
b11100 0
b11100 ;
b10 &
b10 2
b10 <
1!
1(
#12
0!
0(
b101 *
b101 3
b1110 .
b1110 7
b1110 -
b1110 6
#14
1$
1=
b1111 %
b1111 :
b1111 ?
b0 '
b0 0
b0 ;
b101 &
b101 2
b101 <
1!
1(
#16
0!
0(
b110 *
b110 3
b10100 .
b10100 7
b10010 -
b10010 6
#18
b1111111111111110 '
b1111111111111110 0
b1111111111111110 ;
1$
1=
b110 &
b110 2
b110 <
1!
1(
#20
0!
0(
b100 *
b100 3
b10010 .
b10010 7
b10001 -
b10001 6
#22
b0 %
b0 :
b0 ?
b10001 '
b10001 0
b10001 ;
0$
0=
b100 &
b100 2
b100 <
1!
1(
#24
0!
0(
b11 *
b11 3
#26
b11 &
b11 2
b11 <
1!
1(
#28
0!
0(
#30
1!
1(
